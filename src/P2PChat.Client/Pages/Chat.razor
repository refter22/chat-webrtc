@page "/"
@using P2PChat.Client.Services
@using P2PChat.Shared.Models
@using Microsoft.Extensions.Logging
@inject WebRTCService WebRTCService
@inject SignalRService SignalRService
@inject ILogger<Chat> Logger

<div class="chat-container">
    @if (!SignalRService.IsConnected)
    {
        <div class="connecting">
            <p>Connecting to server...</p>
        </div>
    }
    else if (string.IsNullOrEmpty(selectedUserId))
    {
        <div class="user-list">
            <h3>Connected Users (@(connectedUsers.Where(u => u != SignalRService.UserId).Count()))</h3>
            @if (!connectedUsers.Any(u => u != SignalRService.UserId))
            {
                <p>Waiting for other users to connect...</p>
            }
            else
            {
                <div class="users">
                    @foreach (var user in connectedUsers.Where(u => u != SignalRService.UserId))
                    {
                        <button class="user-item" @onclick="() => HandleUserClick(user)">
                            Chat with @user
                        </button>
                    }
                </div>
            }
        </div>
    }
    else
    {
        <div class="chat">
            <div class="messages">
                @foreach (var message in messages)
                {
                    <div class="message @(message.IsFromMe ? "sent" : "received")">
                        @message.Text
                    </div>
                }
            </div>
            <div class="input-area">
                <input @bind="newMessage" @bind:event="oninput" @onkeyup="HandleKeyPress" />
                <button @onclick="SendMessage">Send</button>
            </div>
        </div>
    }
</div>

@code {
    private HashSet<string> connectedUsers = new();
    private string? selectedUserId;
    private List<ChatMessage> messages = new();
    private string newMessage = "";
    private bool isWebRTCConnected;

    protected override async Task OnInitializedAsync()
    {
        SignalRService.OnConnected += HandleConnected;
        SignalRService.OnUserConnected += HandleUserConnected;
        SignalRService.OnSignalReceived += HandleSignalReceived;
        WebRTCService.OnMessageReceived += HandleMessageReceived;
        WebRTCService.OnConnectionEstablished += HandleWebRTCConnected;

        try
        {
            await SignalRService.StartAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to connect: {ex.Message}");
        }
    }

    private void HandleConnected(string userId)
    {
        connectedUsers.Add(userId);
        StateHasChanged();
    }

    private void HandleUserConnected(string userId)
    {
        if (!connectedUsers.Contains(userId))
        {
            connectedUsers.Add(userId);
            StateHasChanged();
        }
    }

    private async Task HandleUserClick(string userId)
    {
        try
        {
            selectedUserId = userId;

            if (WebRTCService.IsConnected && WebRTCService.TargetUserId != userId)
            {
                await WebRTCService.DisposeAsync();
            }

            if (!WebRTCService.IsConnected || WebRTCService.TargetUserId != userId)
            {
                messages.Clear();
                isWebRTCConnected = false;
                await WebRTCService.StartConnection(userId, true);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to start chat with user: {UserId}", userId);
            selectedUserId = null;
        }
    }

    private void HandleSignalReceived(SignalMessage signal)
    {
        Console.WriteLine($"Received signal: {signal.Type}");
    }

    private void HandleMessageReceived(string message)
    {
        messages.Add(new ChatMessage { Text = message, IsFromMe = false });
        StateHasChanged();
    }

    private void HandleWebRTCConnected()
    {
        isWebRTCConnected = true;
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(newMessage)) return;

        if (!isWebRTCConnected)
        {
            Logger.LogWarning("Cannot send message: WebRTC not connected");
            return;
        }

        try
        {
            await WebRTCService.SendMessageAsync(newMessage);
            messages.Add(new ChatMessage { Text = newMessage, IsFromMe = true });
            newMessage = "";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to send message");
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    public void Dispose()
    {
        WebRTCService.OnMessageReceived -= HandleMessageReceived;
        WebRTCService.OnConnectionEstablished -= HandleWebRTCConnected;
        SignalRService.OnConnected -= HandleConnected;
        SignalRService.OnUserConnected -= HandleUserConnected;
        SignalRService.OnSignalReceived -= HandleSignalReceived;
    }

    private class ChatMessage
    {
        public string Text { get; set; } = "";
        public bool IsFromMe { get; set; }
    }
}