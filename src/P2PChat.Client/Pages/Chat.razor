@page "/"
@using P2PChat.Client.Components.Chat
@using P2PChat.Client.ViewModels
@inject ChatViewModel ViewModel
@inject ILogger<Chat> Logger

<div class="chat-container">
    <div class="connection-panel">
        <div class="my-id">
            My ID: @ViewModel.MyUserId
        </div>
        <div class="connect-form">
            <input type="text"
                   @bind="connectToId"
                   placeholder="Enter user ID" />
            <button @onclick="async () => await ViewModel.HandleConnect(connectToId)">
                Connect
            </button>
        </div>
    </div>

    <div class="chat-layout">
        <ChatSidebar
            ActiveChats="@ViewModel.ActiveChats"
            SelectedUserId="@ViewModel.SelectedUserId"
            OnChatSelected="@(userId => ViewModel.HandleSelectChat(userId))" />

        @if (ViewModel.SelectedUserId != null)
        {
            <div class="chat-main">
                <div class="chat-header">
                    <h3>Chat with user @ViewModel.SelectedUserId</h3>
                    @if (ViewModel.IsWebRTCConnected)
                    {
                        <span class="connection-status connected">Connected</span>
                    }
                    else
                    {
                        <span class="connection-status disconnected">Disconnected</span>
                    }
                </div>

                <ChatMessages Messages="@ViewModel.GetCurrentMessages()" />

                <div class="chat-controls">
                    <MessageInput OnSend="@ViewModel.HandleSendMessage" />
                    <FileUpload OnFileSelected="@ViewModel.HandleFileSelected" />
                </div>
            </div>
        }
        else
        {
            <div class="no-chat-selected">
                <p>Select a chat to start messaging</p>
            </div>
        }
    </div>

    @if (!string.IsNullOrEmpty(ViewModel.ErrorMessage))
    {
        <div class="error-message">
            @ViewModel.ErrorMessage
            <button @onclick="@ViewModel.ClearError">âœ•</button>
        </div>
    }

    @if (ViewModel.IsLoading)
    {
        <div class="loading-overlay">
            <div class="spinner"></div>
        </div>
    }
</div>

@code {
    private string connectToId = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ViewModel.Initialize();
            ViewModel.StateChanged += StateHasChanged;
            Logger.LogInformation("Chat component initialized");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error initializing chat component");
            throw;
        }
    }

    public void Dispose()
    {
        try
        {
            ViewModel.StateChanged -= StateHasChanged;
            Logger.LogInformation("Chat component disposed");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error disposing chat component");
        }
    }
}